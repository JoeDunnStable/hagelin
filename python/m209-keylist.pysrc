#!/usr/bin/env python
#
##########################################################################
# Copyright (C) 2009-2013 Mark J. Blair, NF6X
#
# This file is part of Hagelin.
#
#  Hagelin is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Hagelin is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Hagelin.  If not, see <http://www.gnu.org/licenses/>.
##########################################################################

"""Generate M-209 key lists.

    Usage:
        m209-keylist.py <NetIndicator> <Year>

    Example:
        m209-keylist.py MYNET 2013

    Creates directory tree with root at ./<NetIndicator>-<Year>
    containing key tables and key lists. One key table is generated
    for each day of the year, divided by month into subdirectories.
    One key list is generated for each month of the year, specifying
    which key table is to be used during each 24-hour period of the
    month.

    <NetIndicator> must consist of only alphanumeric characters, and
    will be forced to all upper case.

    The \"m209\" executable must be in the search path.

    These additional programs should also be in the search path
    for full functionality:

        tex
        dvipdf
        pdfjam
        pdftk

    m209-keylist.py is part of the hagelin package, available
    at https://gitlab.com/NF6X_Crypto/hagelin

    Copyright (C) 2013 Mark J. Blair <nf6x@nf6x.net>
    Released under GPLv3."""

from __future__ import print_function
import sys
import errno
import os
import calendar
import datetime
import curses.ascii
import getopt


prog_m209   = "m209"
prog_tex    = "tex"
prog_dvipdf = "dvipdf"
prog_pdfjam = "pdfjam"
prog_pdftk  = "pdftk"

PrintFrame = "false"
ReTypeset  = False


def enum(*sequential, **named):
    """Emulate C enum.

    From http://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python

    Use like this:
    >>> Numbers = enum('ZERO', 'ONE', 'TWO')
    >>> Numbers.ZERO
    0
    >>> Numbers.ONE
    1
    """
    enums = dict(list(zip(sequential, list(range(len(sequential))))), **named)
    return type('Enum', (), enums)

PDFstyles = enum('viewable', 'small', 'large')


def version():
    """Print version number to stderr."""
    print("M-209 Key List Generator", file=sys.stderr)
    print("Version @VERSION@", file=sys.stderr)
    print("Copyright (C) 2013 Mark J. Blair <nf6x@nf6x.net>", file=sys.stderr)
    print("Released under GPLv3", file=sys.stderr)


def usage():
    """Print version number and usage information to stderr."""
    print("", file=sys.stderr)
    version()
    print("", file=sys.stderr)
    print("Usage:", file=sys.stderr)
    print("    m209-keylist.py [options] <NetIndicator> <Year>", file=sys.stderr)
    print("", file=sys.stderr)
    print("Options:", file=sys.stderr)
    print("    -h | --help", file=sys.stderr)
    print("        Print version and usage information to stderr and exit.", file=sys.stderr)
    print("", file=sys.stderr)
    print("    -v | --version", file=sys.stderr)
    print("        Print version information to stderr and exit.", file=sys.stderr)
    print("", file=sys.stderr)
    print("    -f | --frame", file=sys.stderr)
    print("        Print frame around each page in n-up PDF files.", file=sys.stderr)
    print("", file=sys.stderr)
    print("    -r | --retypeset", file=sys.stderr)
    print("        Re-typeset key lists in existing directory tree.", file=sys.stderr)
    print("", file=sys.stderr)
    print("Example:", file=sys.stderr)
    print("    m209-keylist.py MYNET 2013", file=sys.stderr)
    exit(1)


# From http://stackoverflow.com/questions/377017/test-if-executable-exists-in-python
def which(program):
    """Search for executable in path."""
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def check_progs():
    """Search for required and optional external programs."""

    global prog_m209
    global prog_tex
    global prog_dvipdf
    global prog_pdfjam
    global prog_pdftk

    prog_m209 = which(prog_m209)
    if prog_m209 == None:
        print("ERROR: m209 program not found in search path.", file=sys.stderr)
        exit(1)
    print("Using", prog_m209, "for key generation.")

    prog_tex = which(prog_tex)
    if prog_tex == None:
        print("tex not found. PDF output disabled.")
        prog_dvipdf = None;
        prog_pdfjam = None;
        prog_pdftk  = None;
    else:
        prog_dvipdf = which(prog_dvipdf)
        if prog_dvipdf == None:
            print("dvipdf not found. PDF output disabled.")
            prog_tex    = None;
            prog_pdfjam = None;
            prog_pdftk  = None;
        else:
            print("Using", prog_tex, "for typesetting.")
            print("Using", prog_dvipdf, "for PDF creation.")
            prog_pdfjam = which(prog_pdfjam)
            if prog_pdfjam == None:
                print("pdfjam not found. Print-optimized PDF output disabled.")
                prog_pdftk  = None;
            else:
                print("Using", prog_pdfjam, "for print-optimized PDF creation.")
                prog_pdftk = which(prog_pdftk)
                if prog_pdftk == None:
                    print("pdftk not fount. Will not burst print-optimized PDF.")
                else:
                    print("Using", prog_pdftk, "to burst print-optimized PDF.")
    print("")


def indicator(NetIndicator, Year, Month, Day):
    """Return key list indicator for specified date.

    Key list indicator is 2-letter string from AA through ZZ.
    Indicator increments each day following pattern
    AA, AB, AC, ... AZ, BA, BB, ... ZY, ZZ, AA, ...

    Key list indicators are calculated from the proleptic
    Gregorian ordinal day (i.e., days since JAN 1 of year 1),
    plus ASCII value of each character of NetIndicator
    (so that different nets tend to use different key list
    indicators on a particular date), modulo 26^2."""

    # Don't try to find deep meaning in this calculation.
    # It is pretty arbitrary.
    IndicatorNum = datetime.date(Year, Month, Day).toordinal()
    for c in NetIndicator:
        IndicatorNum = IndicatorNum + ord(c)
    IndicatorNum = IndicatorNum % 676
    Indicator = chr((IndicatorNum//26) + ord('A')) \
        + chr((IndicatorNum%26) + ord('A'))
    return Indicator



def burst(NetIndicator, Year, Month, Suffix):
    """Burst apart large printable key list into cover, front pages, and rear pages."""

    global ReTypeset
    global prog_pdftk

    if prog_pdftk == None:
        return

    # Compute filenames
    MonthName = calendar.month_abbr[Month].upper()
    BaseName  = NetIndicator + "-" + "%04d" % Year + "-" + MonthName
    Source    = BaseName + "-print2sided-" + Suffix + ".pdf"
    Cover     = BaseName + "-printcover-" + Suffix + ".pdf"
    Front     = BaseName + "-printfront-" + Suffix + ".pdf"
    Back      = BaseName + "-printback-" + Suffix + ".pdf"

    if ReTypeset:
        try:
            os.unlink(Cover)
            os.unlink(Front)
            os.unlink(Back)
        except:
            pass

    # Burst out cover
    print("    " + Cover)
    try:
        rtn = os.system(prog_pdftk + " A=" + Source
                        + " cat 1"
                        + " output " + Cover)
    except Exception as e:
        print("ERROR: Could not execute pdftk: " + e.args[1], file=sys.stderr)
        exit(1)
    if rtn != 0:
        print("ERROR: cover burst failed", file=sys.stderr)
        exit(1)
    
    # Burst out front sides
    print("    " + Front)
    try:
        rtn = os.system(prog_pdftk + " A=" + Source
                        + " cat 4-endeven"
                        + " output " + Front)
    except Exception as e:
        print("ERROR: Could not execute pdftk: " + e.args[1], file=sys.stderr)
        exit(1)
    if rtn != 0:
        print("ERROR: front burst failed", file=sys.stderr)
        exit(1)
    
    # Burst out back sides
    print("    " + Back)
    try:
        rtn = os.system(prog_pdftk + " A=" + Source
                        + " cat 3-endodd"
                        + " output " + Back)
    except Exception as e:
        print("ERROR: Could not execute pdftk: " + e.args[1], file=sys.stderr)
        exit(1)
    if rtn != 0:
        print("ERROR: back burst failed", file=sys.stderr)
        exit(1)
    


def mklist_pdf(NetIndicator, Year, Month, Style):
    """Create PDF version of key list.

    Style must be set to a value from PDFstyles variable,
    i.e. PDFstyles.viewable
    """

    global PrintFrame
    global ReTypeset
    global prog_tex
    global prog_dvipdf
    global prog_pdfjam

    if Style == PDFstyles.viewable:
        if (prog_tex == None) or (prog_dvipdf == None):
            return
        # Compute filenames
        MonthName = calendar.month_abbr[Month].upper()
        BaseName  = NetIndicator + "-" + "%04d" % Year + "-" + MonthName

    elif Style == PDFstyles.small:
        if (prog_tex == None) or (prog_dvipdf == None) or (prog_pdfjam == None):
            return
        # Compute filenames
        MonthName = calendar.month_abbr[Month].upper()
        BaseName  = NetIndicator + "-" + "%04d" % Year + "-" + MonthName + "-print2sided-small"
        TmpPDFFile     = "tmp.pdf"
        TmpPDFFile2    = "tmp-2up.pdf"
        TmpPDFFile3    = "tmp-2up-4up.pdf"

    elif Style == PDFstyles.large:
        if (prog_tex == None) or (prog_dvipdf == None) or (prog_pdfjam == None):
            return
        # Compute filenames
        MonthName = calendar.month_abbr[Month].upper()
        BaseName  = NetIndicator + "-" + "%04d" % Year + "-" + MonthName + "-print2sided-large"
        TmpPDFFile     = "tmp.pdf"
        TmpPDFFile2    = "tmp-2up.pdf"

    else:
        print("INTERNAL ERROR: Illegal style value passed to mklist_pdf", file=sys.stderr)
        exit(1)

    KeyListTeXFile = BaseName + ".tex"
    KeyListLogFile = BaseName + ".log"
    KeyListDVIFile = BaseName + ".dvi"
    KeyListPDFFile = BaseName + ".pdf"
    print("    " + KeyListPDFFile)

    if ReTypeset:
        try:
            os.unlink(KeyListPDFFile)
        except:
            pass

    # Create key list TeX file
    try:
        klt = open(KeyListTeXFile, "w")
    except Exception as e:
        print("ERROR: Could not create key list TeX file: " + e.args[1], file=sys.stderr)
        exit(1)
    
    # Page setup, etc.
    if Style == PDFstyles.viewable:
        print("\\hsize=4.5in \\vsize=7.5in \\special{papersize=5.5in,8.5in}", file=klt)
        print("\\hoffset=-0.5in \\voffset=-0.5in", file=klt)
    elif Style == PDFstyles.small:
        print("\\hsize=5.068in \\vsize=7in \\special{papersize=6.568in,8.5in}", file=klt)
        print("\\hoffset=-0.25in \\voffset=-0.25in", file=klt)
    elif Style == PDFstyles.large:
        print("\\hsize=4.5in \\vsize=7in \\special{papersize=5.5in,8.5in}", file=klt)
        print("\\hoffset=-0.5in \\voffset=-0.25in", file=klt)
    print("\\headline={}\\footline={}", file=klt)
    print("% Draw box with no offset", file=klt)
    print("\\def\\boxzero#1{\\vbox{\\hrule height 0.25pt", file=klt)
    print("\\hbox{\\vrule width 0.25pt", file=klt)
    print("\\vbox{#1}", file=klt)
    print("\\vrule width 0.25pt}\\hrule height 0.25pt}", file=klt)
    print("}", file=klt)
    print("% Put argument in hbox and draw box around it", file=klt)
    print("\\def\\dhbox#1{\\boxzero{\\hbox{#1}}}", file=klt)
    print("% Put argument in vbox and draw box around it", file=klt)
    print("\\def\\dvbox#1{\\boxzero{\\vbox{#1}}}", file=klt)
    print("% Draw box with 3pt offset", file=klt)
    print("\\def\\boxthree#1{\\vbox{\\hrule height 1pt", file=klt)
    print("\\hbox{\\vrule width 1pt\\kern3pt", file=klt)
    print("\\vbox{\\kern3pt#1\\kern3pt}\\kern3pt", file=klt)
    print("\\vrule width 1pt}\\hrule height 1pt}", file=klt)
    print("}", file=klt)
    print("% Draw box with 6pt offset", file=klt)
    print("\\def\\boxsix#1{\\vbox{\\hrule height 1pt", file=klt)
    print("\\hbox{\\vrule width 1pt\\kern6pt", file=klt)
    print("\\vbox{\\kern6pt#1\\kern6pt}\\kern6pt", file=klt)
    print("\\vrule width 1pt}\\hrule height 1pt}", file=klt)
    print("}", file=klt)
    print("\\font\\huge=cmr10 scaled 4800", file=klt)
    print("\\font\\big=cmr10 scaled 2400", file=klt)
    print("\\font\\large=cmr10 scaled 1200", file=klt)
    print("\\font\\largett=cmtt10 scaled 1200", file=klt)
    print("\\font\\keyfont=cmtt10 scaled 1200", file=klt)
    print("\\def\\keyskip{12pt}", file=klt)

    # Cover page I
    print("\\null\\vskip 1in", file=klt)
    print("\\centerline{\\boxthree{\\boxsix{\\hbox{\\huge SECRET}}}}", file=klt)
    print("\\vskip 1.5in", file=klt)
    print("\\centerline{\\big M-209 KEY LIST}", file=klt)
    print("\\vskip 0.75in", file=klt)
    print("\\centerline{\\large NET INDICATOR: \\largett", NetIndicator, "}", file=klt)
    print("\\bigskip", file=klt)
    print("\\centerline{\\large VALID FOR MONTH OF: \\largett", MonthName, "%04d" % Year, "}", file=klt)
    print("\\vfill\\eject", file=klt)

    if (Style == PDFstyles.small) or (Style == PDFstyles.large):
        # Cover page II
        print("\\null\\vfill\\eject", file=klt)

    # Key list page
    print("\\pageno=1", file=klt)
    if Style == PDFstyles.viewable:
        print("\\headline={{\\largett", NetIndicator, "}\\hfill {\\large SECRET} \\hfill{\\largett", \
            MonthName,  "%04d" % Year, "}}", file=klt)
        print("\\footline={\\hfill {\\large SECRET \\hfill \\number\\pageno}}", file=klt)
    elif (Style == PDFstyles.small) or (Style == PDFstyles.large):
        print("\\def\\oddheadline{{\\largett", NetIndicator, \
            "}\\hfill {\\large SECRET} \\hfill{\\largett", MonthName,  "%04d" % Year, "}}", file=klt)
        print("\\def\\evenheadline{{\\largett", MonthName,  "%04d" % Year, \
            "}\\hfill {\\large SECRET} \\hfill{\\largett ", NetIndicator, "}}", file=klt)
        print("\\headline={\\ifodd\\pageno\\oddheadline \\else\\evenheadline\\fi}", file=klt)
        print("\\def\\oddfootline{\\hfill {\\large SECRET \\hfill \\number\\pageno}}", file=klt)
        print("\\def\\evenfootline{{\\large\\number\\pageno\\hfill SECRET \\hfill}}", file=klt)
        print("\\footline={\\ifodd\\pageno\\oddfootline \\else\\evenfootline\\fi}", file=klt)
    print("\\vbox to \\vsize{\\vfill", file=klt)
    print("\\hbox to \\hsize{\\hfill\\vbox{\\keyfont\\obeyspaces\\baselineskip=\\keyskip", file=klt)
    print("\\hbox{NET INDICATOR: " + NetIndicator + "}", file=klt)
    print("\\hbox{}", file=klt)
    print("\\hbox{KEY LIST FOR MONTH OF " + MonthName + " %04d" % Year + "}", file=klt)
    print("\\hbox{}", file=klt)

    # Print table of key list indicators
    for Day in range(1, calendar.monthrange(Year, Month)[1]+1):
        DateStr = "%02d" % Day + " " + MonthName + " " + "%04d" % Year
        Indicator = indicator(NetIndicator, Year, Month, Day)
        print("\\hbox{" + DateStr + "  00:00-23:59 GMT:  USE KEY " + Indicator + "}", file=klt)
    print("}\\hfill}\\vfill}\\eject", file=klt)

    # Add key tables to key list TeX file
    for Day in range(1, calendar.monthrange(Year, Month)[1]+1):
        # Compute file name of key file
        Indicator = indicator(NetIndicator, Year, Month, Day)
        KeyFile = "keys" + os.sep + Indicator + ".txt"

        try:
            kf = open(KeyFile, "r")
        except Exception as e:
            print("ERROR: Could not open key file: " + e.args[1], file=sys.stderr)
            exit(1)
        
        if Style == PDFstyles.viewable:
            print("\\headline={{\\largett", NetIndicator, \
                "}\\hfill {\\large SECRET} \\hfill", \
                "{\\largett %02d" % Day, MonthName,  "%04d" % Year, Indicator, "}}", file=klt)
            print("\\vbox to \\vsize{\\vfill", file=klt)
            print("\\hbox to \\hsize{\\hfill\\vbox{\\keyfont\\obeyspaces\\baselineskip=\\keyskip", file=klt)
        elif (Style == PDFstyles.small) or (Style == PDFstyles.large):
            print("\\def\\oddheadline{{\\largett", NetIndicator, \
                "}\\hfill {\\large SECRET} \\hfill", \
                "{\\largett %02d" % Day, MonthName,  "%04d" % Year, Indicator, "}}", file=klt)
            print("\\def\\evenheadline{{\\largett", \
                Indicator, "%02d" % Day, MonthName,  "%04d" % Year, \
                "}\\hfill {\\large SECRET} \\hfill{\\largett", \
                NetIndicator, "}}", file=klt)
            print("\\vbox to \\vsize{\\vfill", file=klt)
            print("\\hbox to \\hsize{\\hfill", file=klt)
            print("\\vbox{\\keyfont\\obeyspaces\\baselineskip=\\keyskip", file=klt)

        for line in kf.readlines():
            print("\\hbox{" + line.rstrip() + "}", file=klt)
        print("}\\hfill}\\vfill}\\eject", file=klt)

        kf.close()

    if (Style == PDFstyles.small) or (Style == PDFstyles.large):
        print("\\headline={}\\footline={}", file=klt)

        # Pad to 32 pages in short months
        for Day in range(calendar.monthrange(Year, Month)[1]+1, 32):
            print("\\null\\vfill\\eject", file=klt)

        # Cover page III
        print("\\null\\vfill\\eject", file=klt)

        # Cover page IV
        print("\\null\\vfill\\eject", file=klt)

    print("\\bye", file=klt)
    klt.close()

    # Run TeX to generate DVI file
    try:
        rtn = os.system(prog_tex + " -halt-on-error " + KeyListTeXFile + " >/dev/null")
    except Exception as e:
        print("ERROR: Could not execute tex: " + e.args[1], file=sys.stderr)
        exit(1)
    if rtn != 0:
        print("ERROR: DVI generation failed", file=sys.stderr)
        exit(1)

    # Translate DVI to PDF
    try:
        if Style == PDFstyles.viewable:
            rtn = os.system(prog_dvipdf + " " + KeyListDVIFile + " " + KeyListPDFFile)
        elif (Style == PDFstyles.small) or (Style == PDFstyles.large):
            rtn = os.system(prog_dvipdf + " " + KeyListDVIFile + " " + TmpPDFFile)
    except Exception as e:
        print("ERROR: Could not execute dvipdf: " + e.args[1], file=sys.stderr)
        exit(1)
    if rtn != 0:
        print("ERROR: PDF generation failed", file=sys.stderr)
        exit(1)

    if (Style == PDFstyles.small) or (Style == PDFstyles.large):
        # Post-process PDF file to shuffle pages for binding
        # and print them 2-up.
        try:
            if Style == PDFstyles.small:
                rtn = os.system(prog_pdfjam + " --quiet --vanilla --tidy --twoside --suffix 2up"
                                + " --papersize '{13.136in,8.5in}' --signature 36 --nup 1x2"
                                + " --frame " + PrintFrame + " -- "
                                + TmpPDFFile + " -")

            elif Style == PDFstyles.large:
                rtn = os.system(prog_pdfjam + " --quiet --vanilla --tidy --twoside --suffix 2up"
                                + " --papersize '{11in,8.5in}' --signature 36 --nup 1x2"
                                + " --frame " + PrintFrame + " -- "
                                + TmpPDFFile + " -")

        except Exception as e:
            print("ERROR: Could not execute pdfjam: " + e.args[1], file=sys.stderr)
            exit(1)
        if rtn != 0:
            print("ERROR: PDF 2-up failed", file=sys.stderr)
            exit(1)

        if Style == PDFstyles.small:
            # Post-process PDF file again to double pages
            # and print them 4-up.
            try:
                rtn = os.system(prog_pdfjam + " --quiet --vanilla --tidy --suffix 4up"
                                + " --papersize '{8.5in,11in}' --doublepages true --nup 1x2"
                                + " --angle 180 --frame " + PrintFrame + " -- "
                                + TmpPDFFile2 + " -")
            except Exception as e:
                print("ERROR: Could not execute pdfjam: " + e.args[1], file=sys.stderr)
                exit(1)
            if rtn != 0:
                print("ERROR: PDF 4-up failed", file=sys.stderr)
                exit(1)

        try:
            if Style == PDFstyles.small:
                os.rename(TmpPDFFile3, KeyListPDFFile)
            elif Style == PDFstyles.large:
                os.rename(TmpPDFFile2, KeyListPDFFile)
        except Exception as e:
            print("ERROR: Could not rename file: " + e.args[1], file=sys.stderr)
            exit(1)

    # Erase intermediate files
    try:
        os.unlink(KeyListTeXFile)
        os.unlink(KeyListDVIFile)
        os.unlink(KeyListLogFile)
        if (Style == PDFstyles.small) or (Style == PDFstyles.large):
            os.unlink(TmpPDFFile)
        if Style == PDFstyles.small:
            os.unlink(TmpPDFFile2)
    except:
        pass

    if Style == PDFstyles.small:
        # Burst apart for easy printing on single-sided printers
        burst(NetIndicator, Year, Month, "small")

    elif Style == PDFstyles.large:
        # Burst apart for easy printing on single-sided printers
        burst(NetIndicator, Year, Month, "large")


def mklist_text(NetIndicator, Year, Month):
    """Create plain text key list."""

    global ReTypeset

    # Create key list file
    MonthName = calendar.month_abbr[Month].upper()
    KeyListFile = NetIndicator + "-" + "%04d" % Year \
        + "-" + MonthName + ".txt"
    print("    " + KeyListFile)

    if ReTypeset:
        try:
            os.unlink(KeyListFile)
        except:
            pass

    try:
        kl = open(KeyListFile, "w")
    except Exception as e:
        print("ERROR: Could not create key list file: " + e.args[1], file=sys.stderr)
        exit(1)

    # Print introductory information
    print("SECRET    SECRET    SECRET    SECRET    SECRET", file=kl)
    print("", file=kl)
    print("NET INDICATOR", NetIndicator, file=kl)
    print("", file=kl)
    print("KEY LIST FOR MONTH OF", MonthName, "%04d" % Year, file=kl)
    print("", file=kl)

    # Print table of key list indicators
    for Day in range(1, calendar.monthrange(Year, Month)[1]+1):
        DateStr = "%02d" % Day + " " + MonthName + " " + "%04d" % Year
        Indicator = indicator(NetIndicator, Year, Month, Day)
        print("    "+ DateStr + "  00:00-23:59 GMT:  USE KEY " + Indicator, file=kl)

    print("", file=kl)
    print("SECRET    SECRET    SECRET    SECRET    SECRET", file=kl)
    print("", file=kl)
    print("", file=kl)

    # Add key tables to key list file
    for Day in range(1, calendar.monthrange(Year, Month)[1]+1):
        # Compute file name of key file
        Indicator = indicator(NetIndicator, Year, Month, Day)
        KeyFile = "keys" + os.sep + Indicator + ".txt"

        try:
            kf = open(KeyFile, "r")
        except Exception as e:
            print("ERROR: Could not open key file: " + e.args[1], file=sys.stderr)
            exit(1)
        
        print(chr(curses.ascii.FF), file=kl)
        print("SECRET    SECRET    SECRET    SECRET    SECRET", file=kl)
        print("", file=kl)
        print("", file=kl)
        print("", file=kl)
        kl.write(kf.read())
        print("", file=kl)
        print("", file=kl)
        print("", file=kl)
        print("SECRET    SECRET    SECRET    SECRET    SECRET", file=kl)

        kf.close()

    kl.close()



def mklist_month(NetIndicator, Year, Month):
    """Create key list for a one-month period."""

    global ReTypeset
    global prog_m209

    # Create directory for month and cd into it
    MonthName = calendar.month_abbr[Month].upper()
    I1 = indicator(NetIndicator, Year, Month, 1)
    I2 = indicator(NetIndicator, Year, Month, calendar.monthrange(Year, Month)[1])
    print("  " + MonthName + "  " + I1 + "-" + I2)

    if not ReTypeset:
        try:
            os.mkdir(MonthName)
        except Exception as e:
            print("ERROR: Could not create directory " \
                + MonthName + ": " + e.args[1], file=sys.stderr)
            exit(1)

    os.chdir(MonthName)
    
    if not ReTypeset:
        # Create directory for key tables
        if not ReTypeset:
            try:
                os.mkdir("keys")
            except Exception as e:
                print("ERROR: Could not create directory keys: " \
                    + e.args[1], file=sys.stderr)
                exit(1)

        # Generate key table for each day of month
        for Day in range(1, calendar.monthrange(Year, Month)[1]+1):
            # Compute file name of key file
            Indicator = indicator(NetIndicator, Year, Month, Day)
            KeyFile = "keys" + os.sep + Indicator + ".txt"

            # Create key file and write effective period to it.
            try:
                kf = open(KeyFile, "w")
            except Exception as e:
                print("ERROR: Could not create key file: " + e.args[1], file=sys.stderr)
                exit(1)
            print("EFFECTIVE PERIOD:", file=kf)
            DateStr = "%02d" % Day + "-" + MonthName + "-" + "%04d" % Year
            print(DateStr, "00:00 THROUGH 23:59 GMT", file=kf)
            print("", file=kf)
            kf.close()

            # Generate key table by calling external m209 program,
            # and append it to key file.
            try:
                rtn = os.system(prog_m209 + " -l " + Indicator + " -n "
                                + NetIndicator + " -g -p >>" + KeyFile)
            except Exception as e:
                print("ERROR: Could not execute m209: " + e.args[1], file=sys.stderr)
                exit(1)
            if rtn != 0:
                print("ERROR: Key generation failed", file=sys.stderr)
                exit(1)

    # Create plain text version of key list.
    mklist_text(NetIndicator, Year, Month)
 
    # Create PDF version(s) of key list.
    mklist_pdf(NetIndicator, Year, Month, PDFstyles.viewable)
    mklist_pdf(NetIndicator, Year, Month, PDFstyles.small)
    mklist_pdf(NetIndicator, Year, Month, PDFstyles.large)

    # Return to parent directory.
    os.chdir(os.pardir)


def readme(NetIndicator, Year):
    """Create README.txt file in current directory."""

    global ReTypeset

    print("  README.txt")

    if ReTypeset:
        try:
            os.unlink("README.txt")
        except:
            pass

    try:
        rf = open("README.txt", "w")
    except Exception as e:
        print("ERROR: Could not create README.txt file: " + e.args[1], file=sys.stderr)
        exit(1)

    print("M-209 Key Lists", file=rf)
    print("", file=rf)
    print("Net Indicator:", NetIndicator, file=rf)
    print("Year:         ", "%04d" % Year, file=rf)
    print("", file=rf)
    print("Each directory contains an M-209 key list for one month, with", file=rf)
    print("daily key changes. Directory contents are as follows:", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>.txt:", file=rf)
    print("", file=rf)
    print("    Key list in plain ASCII text format. Daily key tables are separated by", file=rf)
    print("    formfeed characters (^L).", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>.pdf:", file=rf)
    print("", file=rf)
    print("    PDF key list, optimized for on-screen viewing.", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>-print2sided-small.pdf:", file=rf)
    print("", file=rf)
    print("    PDF key list optimized for 2-sided printing. Print 2-sided on letter", file=rf)
    print("    size paper (8.5\" x 11\") with pages flipped on the short edge.", file=rf)
    print("    Fold in half lengthwise and staple on the fold, then cut in half", file=rf)
    print("    to produce two copies of the key list as 4.25\" x 5.5\" booklets.", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>-printcover-small.pdf:", file=rf)
    print("", file=rf)
    print("    Same as *-print2sided-small.pdf file, but cover page only.", file=rf)
    print("    Print on colored card stock.", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>-printfront-small.pdf:", file=rf)
    print("", file=rf)
    print("    Same as *-print2sided-small.pdf file, but even sheets", file=rf)
    print("    only, minus the cover.", file=rf)
    print("    Print 1-sided on letter size paper.", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>-printback-small.pdf:", file=rf)
    print("", file=rf)
    print("    Same as *-print2sided-small.pdf file, but odd sheets", file=rf)
    print("    only, minus the cover.", file=rf)
    print("    Print 1-sided on back side of sheets previously printed", file=rf)
    print("    from *-printfront-small.pdf file. Flip sheets around short edge.", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>-print2sided-large.pdf:", file=rf)
    print("", file=rf)
    print("    PDF key list optimized for 2-sided printing. Print 2-sided on letter", file=rf)
    print("    size paper (8.5\" x 11\") with pages flipped on the long edge.", file=rf)
    print("    Fold in half and staple on the fold", file=rf)
    print("    to produce the key list as a 5.5\" x 8.5\" booklet.", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>-printcover-large.pdf:", file=rf)
    print("", file=rf)
    print("    Same as *-print2sided-large.pdf file, but cover page only.", file=rf)
    print("    Print on colored card stock.", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>-printfront-large.pdf:", file=rf)
    print("", file=rf)
    print("    Same as *-print2sided-large.pdf file, but even sheets", file=rf)
    print("    only, minus the cover.", file=rf)
    print("    Print 1-sided on letter size paper.", file=rf)
    print("", file=rf)
    print("<NetIndicator>-<Year>-<Month>-printback-large.pdf:", file=rf)
    print("", file=rf)
    print("    Same as *-print2sided-large.pdf file, but odd sheets", file=rf)
    print("    only, minus the cover.", file=rf)
    print("    Print 1-sided on back side of sheets previously printed", file=rf)
    print("    from *-printfront-large.pdf file. Flip sheets around long edge.", file=rf)
    print("", file=rf)
    print("keys:", file=rf)
    print("", file=rf)
    print("    Directory containing individual key files for each day", file=rf)
    print("    of month. Plain ASCII text files.", file=rf)
    print("", file=rf)
    print("", file=rf)
    print("These key lists were generated by m209-keylist.py, which is", file=rf)
    print("part of the hagelin package. Hagelin is available here:", file=rf)
    print("", file=rf)
    print("    https://gitlab.com/NF6X_Crypto/hagelin", file=rf)
    print("", file=rf)
    print("The author has not seen examples of original M-209 key lists,", file=rf)
    print("so these lists are his interpretaiton of what they might", file=rf)
    print("have looked like.", file=rf)
    print("", file=rf)

    rf.close();


def mklist_year(NetIndicator, Year):
    """Create key lists for a one-year period."""

    global ReTypeset
    
    # Top level directory name
    TopDir = NetIndicator + "-" + "%04d" % Year

    if ReTypeset:
        # Does it already exist?
        if not os.access(TopDir, os.F_OK):
            print("ERROR: " + TopDir + " does not exist.", file=sys.stderr)
            exit(1)

    else:
        # Does it already exist?
        if os.access(TopDir, os.F_OK):
            print("ERROR: " + TopDir + " already exists.", file=sys.stderr)
            exit(1)

        # Create top level directory
        try:
            os.mkdir(TopDir)
        except Exception as e:
            print("ERROR: Could not create directory " \
                + TopDir + ": " + e.args[1], file=sys.stderr)
            exit(1)

    print(TopDir)
    os.chdir(TopDir)

    # Create README.txt file
    readme(NetIndicator, Year)

    # Create key list for each month
    for Month in range(1,13):
        mklist_month(NetIndicator, Year, Month)

    # Return to parent directory
    os.chdir(os.pardir)



    
##########################################################################

if __name__ == "__main__":
    """Main entry point."""

    # Parse arguments
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hvfr",
                                   ["help", "version", "frame", "retypeset"])
    except getopt.GetoptError as err:
        print(str(err), file=sys.stderr)
        usage()
        exit(1)
    
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            exit(0)

        elif opt in ("-v", "--version"):
            version()
            exit(0)

        elif opt in ("-f", "--frame"):
            PrintFrame = "true"

        elif opt in ("-r", "--retypeset"):
            ReTypeset = True

    if len(args) != 2:
        print("ERROR: Wrong number of arguments.", file=sys.stderr)
        usage()
        exit(1)

    NetIndicator = args[0].upper()
    try:
        Year = int(args[1])
    except ValueError:
        print("ERROR: Year must be an integer.", file=sys.stderr)
        usage()
        exit(1)

    if (Year < datetime.MINYEAR) or (Year > datetime.MAXYEAR):
        print("ERROR: Year outside of valid range.", file=sys.stderr)
        usage()
        exit(1)

    # Check for external programs
    check_progs()
    
    # Create the key lists
    mklist_year(NetIndicator, Year)

    exit(0)
